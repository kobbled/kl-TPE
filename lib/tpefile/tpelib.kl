PROGRAM tpelib
%NOLOCKGROUP

%include tpe.klt

--hash struct
%include hash_tpeprog.klt
t_hash(hashname,hval_def,TPE_DICTIONARY_FILENAME)

VAR
  prgm_stats : ARRAY[10] OF hashname

%from errors.klh %import CHK_STAT, karelError 
%from strings.klh %import i_to_s
%from pose.klh %import jpos_to_jpos6, jpos_to_jpos2

%include tpe.private.klh
%include tpe.klh

-- Define TPE dictionary file
%class `TPE_DICTIONARY_FILENAME`('hash.klc','hashclass.klh','hash_tpeprog.klt')

BEGIN
END tpelib

-- *** PRIVATE ***

-- *** PUBLIC ***

-- handlers
-- ***********
ROUTINE tpe__constructor
  VAR
    empty : hval_def
    b : BOOLEAN
  BEGIN
    empty.open_id = 0 ; empty.status = 0 ;
    b = `TPE_DICTIONARY_FILENAME`__clear_table('tpelib', 'prgm_stats', empty)
  END tpe__constructor


ROUTINE tpe__destructor
  VAR
    empty  : hval_def
    b : BOOLEAN
  BEGIN
    empty.open_id = 0 ; empty.status = 0 ;
     b = `TPE_DICTIONARY_FILENAME`__clear_table('tpelib', 'prgm_stats', empty)
  END tpe__destructor


ROUTINE tpe__open
  VAR
    p_stat : hval_def
    open_id, status : INTEGER
    b : BOOLEAN
  BEGIN
    -- Open TPE program in read only
    OPEN_TPE(TPE_name,TPE_RDACC, TPE_RDREJ, open_id, status)
    
    --check status, abort if nessecary
    CHK_STAT(status)

    --add to hash
    p_stat.open_id = open_id
    -- set status to TPE_IS_OPEN
    -- or list the error code
    IF (status = 0) THEN
      p_stat.status = TPE_IS_OPEN
    ELSE
      p_stat.status = status
    ENDIF

    b = `TPE_DICTIONARY_FILENAME`__put(TPE_name, p_stat, 'tpelib', 'prgm_stats')
    IF NOT b THEN karelError(INVALID_INDEX, 'Could not write '+ TPE_name + ' to "prgm_stats" in TPE', ER_ABORT) ; ENDIF

  END tpe__open 

ROUTINE tpe__close
  VAR
    p_stat : TPEPROGRAMS
    status : INTEGER
    b : BOOLEAN
  BEGIN
    -- get openid if it exists
    b = `TPE_DICTIONARY_FILENAME`__get(TPE_name, p_stat, 'tpelib', 'prgm_stats')
    IF NOT b THEN karelError(TPE_UPDATE_FAILED, TPE_name + ' does not appear to be open.', ER_WARN) ; ENDIF
    --close if program foudn in log
    IF b THEN
      --close tpe program
      CLOSE_TPE (p_stat.open_id, status)
      --check status
      CHK_STAT(status)
      --remove from hash
      b = `TPE_DICTIONARY_FILENAME`__delete(TPE_name, 'tpelib', 'prgm_stats')
    ENDIF

  END tpe__close

ROUTINE tpe__get_open_id
  VAR
    p_stat : TPEPROGRAMS
    b : BOOLEAN
  BEGIN
    --see if file is already open
    b = `TPE_DICTIONARY_FILENAME`__get(TPE_name, p_stat, 'tpelib', 'prgm_stats')
    IF NOT b THEN
      karelError(FILE_NOT_OPEN, TPE_name + ' is not open. use TPE__open to open file first.', ER_WARN)
    ENDIF

    RETURN(p_stat)
  END tpe__get_open_id


--get AR variables from TPE file
--******************

-- Return int LS argument value
ROUTINE tpe__get_int_arg
  VAR
    data_type  : INTEGER
    int_value  : INTEGER
    real_value : REAL
    string_value : STRING[1]
    STATUS     : INTEGER
  BEGIN
    data_type = Type_INTEGER
    
    GET_TPE_PRM(reg_no, data_type, int_value, real_value, string_value, STATUS)
    IF STATUS = NOPARAM THEN
        WRITE('Parameter AR[', reg_no ,'] does not exist.')
    ENDIF
    IF data_type <> 1 THEN
      karelError(EXPECTED_INT, 'TPE argument ' + i_to_s(reg_no) + ' is not an integer', ER_ABORT)
    ENDIF
    CHK_STAT(STATUS)
    
    RETURN(int_value)
    
  END tpe__get_int_arg


-- Return real LS argument value
ROUTINE tpe__get_real_arg
  VAR
    data_type  : INTEGER
    int_value  : INTEGER
    real_value : REAL
    string_value : STRING[1]
    STATUS     : INTEGER
  BEGIN
    data_type = Type_REAL
    
    GET_TPE_PRM(reg_no, data_type, int_value, real_value, string_value, STATUS)
    IF (real_value = 0) AND (int_value <> 0) THEN
      real_value = int_value
    ENDIF
    IF data_type = 3  THEN
      karelError(EXPECTED_REAL, 'TPE argument ' + i_to_s(reg_no) + ' is not a number', ER_ABORT)
    ENDIF
    IF STATUS = NOPARAM THEN
        WRITE('Parameter AR[', reg_no ,'] does not exist.')
    ENDIF
    CHK_STAT(STATUS)
    
    RETURN(real_value)
    
  END tpe__get_real_arg


-- get LS string argument
ROUTINE tpe__get_string_arg
  VAR
    data_type  : INTEGER
    int_value  : INTEGER
    real_value : REAL
    string_value : STRING[32]
    STATUS     : INTEGER
  BEGIN
    data_type = Type_STRING
    
    GET_TPE_PRM(reg_no, data_type, int_value, real_value, string_value, STATUS)
    IF STATUS = NOPARAM THEN
        WRITE('Parameter AR[', reg_no ,'] does not exist.')
    ENDIF
    IF data_type <> 3 THEN
      karelError(INVALID_STRING, 'TPE argument ' + i_to_s(reg_no) + ' is not a string', ER_ABORT)
    ENDIF
    
    CHK_STAT(STATUS)
    
    RETURN(string_value)
  END tpe__get_string_arg

ROUTINE tpe__get_boolean_arg
  VAR
    data_type  : INTEGER
    int_value  : INTEGER
    real_value : REAL
    string_value : STRING[1]
    STATUS     : INTEGER
  BEGIN
    data_type = Type_INTEGER
    
    GET_TPE_PRM(reg_no, data_type, int_value, real_value, string_value, STATUS)
    IF STATUS = NOPARAM THEN
        WRITE('Parameter AR[', reg_no ,'] does not exist.')
    ENDIF
    IF data_type <> 1 THEN
      karelError(EXPECTED_INT, 'TPE argument ' + i_to_s(reg_no) + ' is not an integer', ER_ABORT)
    ENDIF
    CHK_STAT(STATUS)

    IF (int_value = 0) THEN
      RETURN(FALSE)
    ENDIF
    
    RETURN(TRUE)
  END tpe__get_boolean_arg

ROUTINE tpe__get_vector_arg
  VAR
    p : XYZWPR
    v : VECTOR
    STATUS : INTEGER
  BEGIN
    IF (reg_no <= 0) THEN
        WRITE TPERROR (CR, 'position register must be > 0')
    ENDIF

    p = GET_POS_REG(reg_no, STATUS, 1)
    CHK_STAT(STATUS)
    IF STATUS <> 0 THEN
        karelError(POS_REG_NOT_SET,'PR' + i_to_s(reg_no) + ' not set for vector arg.', ER_ABORT)
    ENDIF

    v.x = p.x ; v.y = p.y ; v.z = p.z ;

    RETURN(v)

  END tpe__get_vector_arg

ROUTINE tpe__parameter_exists
  VAR
    data_type  : INTEGER
    int_value  : INTEGER
    real_value : REAL
    string_value : STRING[32]
    STATUS     : INTEGER
  BEGIN
    GET_TPE_PRM(reg_no, data_type, int_value, real_value, string_value, STATUS)
    IF STATUS = NOPARAM THEN
      RETURN(FALSE)
    ELSE
      RETURN(TRUE)
    ENDIF
  END tpe__parameter_exists

