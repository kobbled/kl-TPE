PROGRAM tpelib
%NOLOCKGROUP

-- USER STRUCT
%include hash_tpeprog.klt
--print type found in hashtypetest.klt
hash_type_define(hashtpe)
%undef hash_type_define

t_hash(hashname,hval_def,hashtpe)

%include tpe.klt

%from errors.klh %import CHK_STAT, karelError 
%from strings.klh %import i_to_s
%from pose.klh %import jpos_to_jpos6, jpos_to_jpos2

%include tpe.private.klh
%include tpe_pose.klh
%include tpe.klh

-- h_prgstat
%class hashtpe('hash.klc','hashclass.klh','hash_tpeprog.klt')

BEGIN
END tpelib

-- *** PRIVATE ***
ROUTINE tpe__check_if_open
  VAR
    p_stat : hval_type
    b : BOOLEAN
  BEGIN
    --see if file is already open
    b = hashtpe__get(TPE_name, p_stat, 'tpe', 'prgm_stats')
    IF NOT b THEN
      -- Open TPE program in read only
      tpe__open(TPE_name)
      -- retrieve to get openid
      b = hashtpe__get(TPE_name, p_stat, 'tpe', 'prgm_stats')
    ENDIF

    RETURN(p_stat)
  END tpe__check_if_open

ROUTINE tpe__get_pose_grp
  VAR
    posn_typ, num_axs : INTEGER
    p_stat : hval_type
    status : INTEGER
  BEGIN
    -- get pose type
    GET_POS_TYP(open_id, pose_no, grp_no, posn_typ, num_axs, status)
    CHK_STAT(status)
    IF status <> 0 THEN RETURN(FALSE) ; ENDIF

    SELECT posn_typ OF
      -- cartesian rep
      CASE (CC_POSITION,CC_XYZWPR,CC_EXT) :
        -- get cartesian representation
        pose.t_xyz = GET_POS_TPE(open_id, pose_no, status, grp_no)
        CHK_STAT(status)
        IF status <> 0 THEN RETURN(FALSE) ; ENDIF
      -- joint rep
      CASE (CC_JOINT) :
        -- get joint represenation of posreg
        pose.t_joint = GET_JPOS_TPE(open_id, pose_no, status, grp_no)
        CHK_STAT(status)
        IF status <> 0 THEN RETURN(FALSE) ; ENDIF
    ENDSELECT

    RETURN(TRUE)
  END tpe__get_pose_grp


ROUTINE tpe__get_pose_turntable
  VAR
    b1, b2 : BOOLEAN
    p : POSEDATA
  BEGIN
    --group mask decimal corresponds with (gp1,gp2,gp3,gp4)
    --1000 = 1 : 0100 = 2  : 0010 = 4  : 0001 = 8
    --           1100 = 3  : 1010 = 5  : 1001 = 9
    --           1110 = 7  : 1110 = 7  : 1011 = 13
    --                     : 1011 = 13 :

    --assume robot is on group 1
    SELECT grp_mask OF
      CASE (1,3,5,7,9,11,13) :
        --get robot pose
        b1 = tpe__get_pose_grp(open_id, pose_no, 1, p)
        -- variability as to whether pose is cartesion or joint
        IF b1 AND UNINIT(p.t_joint) THEN
          pose.robot_cart = p.t_xyz
        ELSE IF b1 AND UNINIT(p.t_xyz) THEN
          pose.robot_jnt = pose__jpos_to_jpos6(p.t_joint)
        ENDIF
        ENDIF
    ENDSELECT

    --get rotary group
    SELECT grp_mask OF
      --group 2
      CASE (2,3) :
        b2 = tpe__get_pose_grp(open_id, pose_no, 2, p)
        --assume joint representation
        IF b2 THEN
          pose.rotary = pose__jpos_to_jpos2(p.t_joint) ;
        ENDIF
      --group 3
      CASE (4,5) :
        b2 = tpe__get_pose_grp(open_id, pose_no, 3, p)
        --assume joint representation
        IF b2 THEN
          pose.rotary = pose__jpos_to_jpos2(p.t_joint) ;
        ENDIF
      --group 4
      CASE (8,9) :
        b2 = tpe__get_pose_grp(open_id, pose_no, 4, p)
        --assume joint representation
        IF b2 THEN
          pose.rotary = pose__jpos_to_jpos2(p.t_joint) ;
        ENDIF
    ENDSELECT

    --OR op b1, and b2. Will return false if it didn't retrieve either
    RETURN(b1 OR b2)

  END tpe__get_pose_turntable
  


-- *** PUBLIC ***

-- handlers
-- ***********
ROUTINE tpe__constructor
  VAR
    empty : hval_def
    b : BOOLEAN
  BEGIN
    empty.open_id = 0 ; empty.status = 0 ;
    b = hashtpe__clear_table('tpe', 'prgm_stats', empty)
  END tpe__constructor


ROUTINE tpe__destructor
  VAR
    empty  : hval_def
    b : BOOLEAN
  BEGIN
    empty.open_id = 0 ; empty.status = 0 ;
     b = hashtpe__clear_table('tpe', 'prgm_stats', empty)
  END tpe__destructor


ROUTINE tpe__open
  VAR
    p_stat : hval_def
    open_id, status : INTEGER
    b : BOOLEAN
  BEGIN
    -- Open TPE program in read only
    OPEN_TPE(TPE_name,TPE_RDACC, TPE_RDREJ, open_id, status)
    
    --check status, abort if nessecary
    CHK_STAT(status)

    --add to hash
    p_stat.open_id = open_id
    -- set status to TPE_IS_OPEN
    -- or list the error code
    IF (status = 0) THEN
      p_stat.status = TPE_IS_OPEN
    ELSE
      p_stat.status = status
    ENDIF

    b = hashtpe__put(TPE_name, p_stat, 'tpe', 'prgm_stats')
    IF NOT b THEN karelError(INVALID_INDEX, 'Could not write '+ TPE_name + ' to "prgm_stats" in TPE', ER_ABORT) ; ENDIF

  END tpe__open 

ROUTINE tpe__close
  VAR
    p_stat : hval_type
    status : INTEGER
    b : BOOLEAN
  BEGIN
    -- get openid if it exists
    b = hashtpe__get(TPE_name, p_stat, 'tpe', 'prgm_stats')
    IF NOT b THEN karelError(TPE_UPDATE_FAILED, TPE_name + ' does not appear to be open.', ER_WARN) ; ENDIF
    --close if program foudn in log
    IF b THEN
      --close tpe program
      CLOSE_TPE (p_stat.open_id, status)
      --check status
      CHK_STAT(status)
      --remove from hash
      b = hashtpe__delete(TPE_name, 'tpe', 'prgm_stats')
    ENDIF

  END tpe__close

--get AR variables from TPE file
--******************

-- Return int LS argument value
ROUTINE tpe__get_int_arg
  VAR
    data_type  : INTEGER
    int_value  : INTEGER
    real_value : REAL
    string_value : STRING[1]
    STATUS     : INTEGER
  BEGIN
    data_type = Type_INTEGER
    
    GET_TPE_PRM(reg_no, data_type, int_value, real_value, string_value, STATUS)
    IF STATUS = NOPARAM THEN
        WRITE('Parameter AR[', reg_no ,'] does not exist.')
    ENDIF
    IF data_type <> 1 THEN
      karelError(EXPECTED_INT, 'TPE argument ' + i_to_s(reg_no) + ' is not an integer', ER_ABORT)
    ENDIF
    CHK_STAT(STATUS)
    
    RETURN(int_value)
    
  END tpe__get_int_arg


-- Return real LS argument value
ROUTINE tpe__get_real_arg
  VAR
    data_type  : INTEGER
    int_value  : INTEGER
    real_value : REAL
    string_value : STRING[1]
    STATUS     : INTEGER
  BEGIN
    data_type = Type_REAL
    
    GET_TPE_PRM(reg_no, data_type, int_value, real_value, string_value, STATUS)
    IF (real_value = 0) AND (int_value <> 0) THEN
      real_value = int_value
    ENDIF
    IF data_type = 3  THEN
      karelError(EXPECTED_REAL, 'TPE argument ' + i_to_s(reg_no) + ' is not a number', ER_ABORT)
    ENDIF
    IF STATUS = NOPARAM THEN
        WRITE('Parameter AR[', reg_no ,'] does not exist.')
    ENDIF
    CHK_STAT(STATUS)
    
    RETURN(real_value)
    
  END tpe__get_real_arg


-- get LS string argument
ROUTINE tpe__get_string_arg
  VAR
    data_type  : INTEGER
    int_value  : INTEGER
    real_value : REAL
    string_value : STRING[32]
    STATUS     : INTEGER
  BEGIN
    data_type = Type_STRING
    
    GET_TPE_PRM(reg_no, data_type, int_value, real_value, string_value, STATUS)
    IF STATUS = NOPARAM THEN
        WRITE('Parameter AR[', reg_no ,'] does not exist.')
    ENDIF
    IF data_type <> 3 THEN
      karelError(INVALID_STRING, 'TPE argument ' + i_to_s(reg_no) + ' is not a string', ER_ABORT)
    ENDIF
    
    CHK_STAT(STATUS)
    
    RETURN(string_value)
  END tpe__get_string_arg

ROUTINE tpe__get_boolean_arg
  VAR
    data_type  : INTEGER
    int_value  : INTEGER
    real_value : REAL
    string_value : STRING[1]
    STATUS     : INTEGER
  BEGIN
    data_type = Type_INTEGER
    
    GET_TPE_PRM(reg_no, data_type, int_value, real_value, string_value, STATUS)
    IF STATUS = NOPARAM THEN
        WRITE('Parameter AR[', reg_no ,'] does not exist.')
    ENDIF
    IF data_type <> 1 THEN
      karelError(EXPECTED_INT, 'TPE argument ' + i_to_s(reg_no) + ' is not an integer', ER_ABORT)
    ENDIF
    CHK_STAT(STATUS)

    IF (int_value = 0) THEN
      RETURN(FALSE)
    ENDIF
    
    RETURN(TRUE)
  END tpe__get_boolean_arg

ROUTINE tpe__get_vector_arg
  VAR
    p : XYZWPR
    v : VECTOR
    STATUS : INTEGER
  BEGIN
    IF (reg_no <= 0) THEN
        WRITE TPERROR (CR, 'position register must be > 0')
    ENDIF

    p = GET_POS_REG(reg_no, STATUS, 1)
    CHK_STAT(STATUS)
    IF STATUS <> 0 THEN
        karelError(POS_REG_NOT_SET,'PR' + i_to_s(reg_no) + ' not set for vector arg.', ER_ABORT)
    ENDIF

    v.x = p.x ; v.y = p.y ; v.z = p.z ;

    RETURN(v)

  END tpe__get_vector_arg

ROUTINE tpe__parameter_exists
  VAR
    data_type  : INTEGER
    int_value  : INTEGER
    real_value : REAL
    string_value : STRING[32]
    STATUS     : INTEGER
  BEGIN
    GET_TPE_PRM(reg_no, data_type, int_value, real_value, string_value, STATUS)
    IF STATUS = NOPARAM THEN
      RETURN(FALSE)
    ELSE
      RETURN(TRUE)
    ENDIF
  END tpe__parameter_exists

--retrieve pose data
--******************

ROUTINE tpe__get_pose_data
  VAR
    posn_typ, num_axs : INTEGER
    p_stat : hval_type
    b : BOOLEAN
  BEGIN
    --open tpe if its not open
    p_stat = tpe__check_if_open(TPE_name)
    --try and retrieve pose
    b = tpe__get_pose_grp(p_stat.open_id, pose_no, grp_no, pose)
    --if pos was not retrieved b = FALSE
    RETURN(b)
  END tpe__get_pose_data

ROUTINE tpe__get_last_pose
  VAR
    p_stat : hval_type
    pose : XYZWPR
    i, end_pose, last_pose : INTEGER
    posn_typ, num_axs : INTEGER
    status : INTEGER
    b : BOOLEAN
  BEGIN
    p_stat = tpe__check_if_open(TPE_name)

    -- get next available position
    -- in hopes it is the last one
    AVL_POS_NUM(p_stat.open_id, last_pose, status)
    --if this fails return 0 so that path loop errors out
    CHK_STAT(status)
    IF status <> 0 THEN RETURN(0) ; ENDIF

    --check the next 20 positions for existence
    end_pose = last_pose + 20
    b = FALSE
    FOR i = last_pose TO end_pose DO
      GET_POS_TYP(p_stat.open_id, i, grp_no, posn_typ, num_axs, status)
      --check if status returns uninitialized
      IF status <> TPE_P_UNINIT THEN
        b = TRUE
        GOTO END_SRCH
      ENDIF
    ENDFOR
    END_SRCH::

    --if it didn't find a position after use last_pose
    --if it did find a position use MAX_POINTS as we cant
    --determin the final position
    IF b THEN RETURN(MAX_POINTS); ENDIF

    RETURN(last_pose)
  END tpe__get_last_pose

ROUTINE tpe__get_poses
  VAR
    p_stat : hval_type
    i : INTEGER
    length		:	INTEGER
    b : BOOLEAN
    pos : TURNTABLE
    grp_mask : INTEGER
    last_pose : INTEGER
    status : INTEGER
  BEGIN
    p_stat = tpe__check_if_open(TPE_name)

    --get group mask
    GET_ATTR_PRG(TPE_name, AT_DEF_GROUP, grp_mask, '', status)
    CHK_STAT(status)
    IF status <> 0 THEN RETURN(FALSE) ; ENDIF
    --group mask decimal corresponds with (gp1,gp2,gp3,gp4)
    --1000 = 1 : 0100 = 2  : 0010 = 4  : 0001 = 8
    --           1100 = 3  : 1010 = 5  : 1001 = 9
    --           1110 = 7  : 1110 = 7  : 1011 = 13
    --                     : 1011 = 13 :

    --get last position
    SELECT grp_mask OF
      --group 1
      CASE (1,3,5,7,9,11,13) :
        last_pose = tpe__get_last_pose(TPE_name, 1)
      --group 2
      CASE (2) :
        last_pose = tpe__get_last_pose(TPE_name, 2)
      --group 3
      CASE (4) :
        last_pose = tpe__get_last_pose(TPE_name, 3)
      --group 4
      CASE (8) :
        last_pose = tpe__get_last_pose(TPE_name, 4)
    ENDSELECT
    
    -- retrieve all the poses in the TP program
    FOR i = 1 TO last_pose DO
      b = tpe__get_pose_turntable(p_stat.open_id, 1, grp_mask, pos)
      IF b THEN
        --add blank nodes in between last and current
        -- found point if needed
        length = PATH_LEN(poses)
        WHILE length < i DO
          APPEND_NODE(poses,status)
		      length = PATH_LEN(poses)
        ENDWHILE
        --add point to path
        poses[i] = pos
      ENDIF
    ENDFOR

  END tpe__get_poses

