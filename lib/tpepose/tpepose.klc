PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'tpepose'
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%ifeq DEBUG_BUILD FALSE
%undef DEBUG_BUILD
%endif

%include namespace.m

%ifdef DEBUG_BUILD
%include display.c.klt
%endif

%ifdef ROT_GRP
%ifeq ROT_GRP 0
%undef ROT_GRP
%endif
%endif
%ifdef TRACK_GRP
%ifeq TRACK_GRP 0
%undef TRACK_GRP
%endif
%endif

%include errors.klt
%include pose.const.klt
%include pathlib.klt
%include toolpath.structs.klt

%include tpe.const.klt
%include tpe.types.klt

--enums for motion statements
%include tpepose.const.klt

-- define system dependent position type t_NODE
-- [!IMPORTANT] this must be defined in a template file
-- see test examples.
%ifdef motion_type
motion_type(MOTION_DATA_FILE)
%endif

-- general types that are not system specific.
-- can be cartesian or joint
%include tpepose.general.type.klt

-- position definition struct for saving TPE positions in
-- a t_NODE struct
%include tpepose.system.type.klt
set_position_type(class_name)

--add tpefile friend members
%include tpefile.friend.member.klt

%define BASE_CLASSNAME class_name

-- dependencies
%include errors.klh
%include pose.klh
%include strings.klh
%from files.klh %import read_line_ref
%include tpe.klh

%ifdef DEBUG_BUILD
%from display.klh %import clear, show
%endif

-- Robot pose implementation header
-- > [!WARNING] Dont try to build the robotmotion class in the tpe module
-- > currently it will only build in the motion module due to dependencies
-- > only defining headers here!
impl_motion_head(MOTION_DATA_FILE)

%defeval class_name BASE_CLASSNAME

--class headers
%include tpepose.klh

-- ************ PRIVATE MEMBERS ************

ROUTINE getcartpos_(open_id : INTEGER; pose_no: INTEGER; out_pose : MOTION_DATA_TYPE) : BOOLEAN
  VAR
    posn_typ, num_axs, status : INTEGER
  BEGIN
  
%ifdef RBT_GRP
    --check if it is cartesian or joint
    GET_POS_TYP(open_id, pose_no, RBT_GRP, posn_typ, num_axs, status)
    
    --only process cartesian positions
    IF posn_typ <> CC_JOINT THEN
      -- get cartesian representation
%ifdef MOTION_TYPE_ATTR1
      out_pose.MOTION_TYPE_ATTR1 = GET_POS_TPE(open_id, pose_no, status, RBT_GRP)
      IF UNINIT(out_pose.MOTION_TYPE_ATTR1) THEN RETURN(FALSE) ; ENDIF
%else
      out_pose = GET_POS_TPE(open_id, pose_no, status, RBT_GRP)
      IF UNINIT(out_pose) THEN RETURN(FALSE) ; ENDIF
%endif
      CHK_STAT(status)
    ELSE
%ifdef DEBUG_BUILD
      karelError(INVALID_POSITION_TYPE, 'P[' + i_to_s(pose_no) + '] is not a cartesian position.', ER_WARN)
%endif
      RETURN(FALSE)
    ENDIF
%endif

%ifdef ROT_GRP
    out_pose.MOTION_TYPE_ATTR2 = GET_JPOS_TPE(open_id, pose_no, status, ROT_GRP)
%endif

    RETURN(TRUE)

  END getcartpos_


ROUTINE getjointpos_(open_id : INTEGER; pose_no: INTEGER; out_pose : MOTION_DATA_JOINT_TYPE) : BOOLEAN
  VAR
    posn_typ, num_axs, status : INTEGER
  BEGIN
  
%ifdef RBT_GRP
    --check if it is cartesian or joint
    GET_POS_TYP(open_id, pose_no, RBT_GRP, posn_typ, num_axs, status)
    
    --only process joint positions
    IF NOT UNINIT(num_axs) THEN
      -- get joint representation
%ifdef MOTION_TYPE_ATTR1
      out_pose.MOTION_TYPE_ATTR1 = GET_JPOS_TPE(open_id, pose_no, status, RBT_GRP)
      IF UNINIT(out_pose.MOTION_TYPE_ATTR1) THEN RETURN(FALSE) ; ENDIF
%else
      out_pose = GET_JPOS_TPE(open_id, pose_no, status, RBT_GRP)
      IF UNINIT(out_pose) THEN RETURN(FALSE) ; ENDIF
%endif
      CHK_STAT(status)
    ELSE
%ifdef DEBUG_BUILD
      karelError(INVALID_POSITION_TYPE, 'P[' + i_to_s(pose_no) + '] is not a joint position.', ER_WARN)
%endif
      RETURN(FALSE)
    ENDIF
%endif

%ifdef ROT_GRP
    out_pose.MOTION_TYPE_ATTR2 = GET_JPOS_TPE(open_id, pose_no, status, ROT_GRP)
%endif

    RETURN(TRUE)
  END getjointpos_

-- return the index of the next open pose in the /POSE set
ROUTINE lastposidx_(open_id : INTEGER; grp_no : INTEGER) : INTEGER
  VAR
    pose : XYZWPR
    i, last_pose : INTEGER
    posn_typ, num_axs : INTEGER
    status : INTEGER
  BEGIN

LOOPIDX::
    -- get next available position
    -- in hopes it is the last one
    AVL_POS_NUM(open_id, last_pose, status)

    --if this fails return 0 so that path loop errors out
    CHK_STAT(status)

    --check the next 20 positions for existence. There may be 
    --a gap in the list and need to check for this.
    FOR i = last_pose+1 TO last_pose + 20 DO
      GET_POS_TYP(open_id, i, grp_no, posn_typ, num_axs, status)
      --check if status found a position.
      --if next 20 position are uninitialized then return last_pose
      
      IF status = SUCCESS THEN
        --found a position loop AVL_POS_NUM to find the next last position
        GOTO LOOPIDX
      ENDIF
    ENDFOR

    RETURN(last_pose-1)

  END lastposidx_

-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-- %%%%%%%%%%%%% PUBLIC MEMBERS %%%%%%%%%%%%%
-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-- ******* intializers ******
-- **************************

ROUTINE set_motion_default
  VAR
    motiondata : t_MOTIONSTAT
  BEGIN
    motiondata.fine = FALSE
    motiondata.accel = 0

    motiondata.coord = FALSE
    motiondata.rtcp = FALSE

    motiondata.tool_offset = 0
    motiondata.frame_offset = 0

    RETURN(motiondata)
  END set_motion_default


-- ********* getters ********
-- **************************

ROUTINE get_pose_grp
  VAR
    posn_typ, num_axs : INTEGER
    utool, uframe : INTEGER
    p_stat : TPEPROGRAMS
    status : INTEGER
  BEGIN
    -- get open id of prog
    p_stat = tpe__get_open_id(TPE_name)

    -- get pose type
    GET_POS_TYP(p_stat.open_id, pose_no, grp_no, posn_typ, num_axs, status)
    CHK_STAT(status)
    IF status <> 0 THEN RETURN(FALSE) ; ENDIF

    SELECT posn_typ OF
      -- cartesian rep
      CASE (CC_POSITION,CC_XYZWPR,CC_EXT) :
        -- get cartesian representation
        pose.xyz = GET_POS_TPE(p_stat.open_id, pose_no, status, grp_no)
        CHK_STAT(status)
        IF status <> 0 THEN RETURN(FALSE) ; ENDIF
      -- joint rep
      CASE (CC_JOINT) :
        -- get joint represenation of posreg
        pose.joint = GET_JPOS_TPE(p_stat.open_id, pose_no, status, grp_no)
        CHK_STAT(status)
        IF status <> 0 THEN RETURN(FALSE) ; ENDIF
    ENDSELECT

    --set toolframe, and userframe
    GET_POS_FRM(p_stat.open_id, pose_no, 1, uframe, utool, status)
    pose.frame = uframe
    pose.tool = utool

    RETURN(TRUE)
  END get_pose_grp

ROUTINE get_cart_pose
  VAR
    p_stat : TPEPROGRAMS
    p : MOTION_DATA_TYPE
    b : BOOLEAN
  BEGIN
    -- get open id of prog
    p_stat = tpe__get_open_id(TPE_name)

    b = getcartpos_(p_stat.open_id, pose_no, p)

    RETURN(p)

  END get_cart_pose

ROUTINE get_joint_pose
  VAR
    p_stat : TPEPROGRAMS
    p : MOTION_DATA_JOINT_TYPE
    b : BOOLEAN
  BEGIN
    -- get open id of prog
    p_stat = tpe__get_open_id(TPE_name)

    b = getjointpos_(p_stat.open_id, pose_no, p)

    RETURN(p)

  END get_joint_pose

ROUTINE get_last_pose_index
  VAR
    p_stat : TPEPROGRAMS
  BEGIN
    p_stat = tpe__get_open_id(TPE_name)

    RETURN(lastposidx_(p_stat.open_id, 1))
  END get_last_pose_index

ROUTINE get_cart_poses
  VAR
    p_stat : TPEPROGRAMS
    pos : t_POSITION
    i : INTEGER
    last_pose : INTEGER
    utool, uframe : INTEGER
    status : INTEGER
    b : BOOLEAN
  BEGIN
    p_stat = tpe__get_open_id(TPE_name)

    -- get last index
    last_pose = lastposidx_(p_stat.open_id, 1)

%ifdef DEBUG_BUILD
    WRITE('last position index: ', last_pose, CR)
%endif

    -- retrieve all the poses in the TP program
    FOR i = 1 TO last_pose DO
      b = getcartpos_(p_stat.open_id, i, pos.pose)
      IF b THEN
        pos.id = i
        --get toolframe, and userframe
        GET_POS_FRM(p_stat.open_id, i, RBT_GRP, uframe, utool, status)
        pos.tool = utool
        pos.frame = uframe 

        APPEND_NODE(poses,status)
        --add point to path
        poses[PATH_LEN(poses)] = pos
      ENDIF
    ENDFOR

  END get_cart_poses

ROUTINE get_joint_poses
  VAR
    p_stat : TPEPROGRAMS
    pos : t_JPOSITION
    i : INTEGER
    last_pose : INTEGER
    utool, uframe : INTEGER
    status : INTEGER
    b : BOOLEAN
  BEGIN
    p_stat = tpe__get_open_id(TPE_name)

    -- get last index
    last_pose = lastposidx_(p_stat.open_id, 1)

%ifdef DEBUG_BUILD
    WRITE('last position index: ', last_pose, CR)
%endif

    -- retrieve all the poses in the TP program
    FOR i = 1 TO last_pose DO
      b = getjointpos_(p_stat.open_id, i, pos.pose)
      IF b THEN
        pos.id = i
        --get toolframe, and userframe
        GET_POS_FRM(p_stat.open_id, i, RBT_GRP, uframe, utool, status)
        pos.tool = utool
        pos.frame = uframe 
        
        APPEND_NODE(poses,status)
        --add point to path
        poses[PATH_LEN(poses)] = pos
      ENDIF
    ENDFOR

  END get_joint_poses

-- ****** Read LS File ******
-- **************************

ROUTINE is_line_a_motion
  BEGIN
    IF SUB_STR(motion_line,1,1) = 'J' THEN
      RETURN(TRUE)
    ENDIF
    IF SUB_STR(motion_line,1,1) = 'L' THEN
      RETURN(TRUE)
    ENDIF
    IF SUB_STR(motion_line,1,1) = 'C' THEN
      RETURN(TRUE)
    ENDIF
    IF SUB_STR(motion_line,1,1) = 'A' THEN
      RETURN(TRUE)
    ENDIF
    
    RETURN(FALSE)
  END is_line_a_motion

ROUTINE parse_mod_(motion_line : STRING; motiondata : t_MOTIONSTAT)
  VAR
    dstr : STRING[32]
  BEGIN
    --get modifier
    dstr = takeStr(motion_line, ' ')

    IF SUB_STR(dstr, 1, 3) = 'ACC' THEN
      motiondata.accel = getIntInStr(dstr)
    ELSE IF SUB_STR(dstr, 1, 3) = 'COO' THEN
      motiondata.coord = TRUE
    ELSE IF SUB_STR(dstr, 1, 3) = 'RTC' THEN
      motiondata.rtcp = TRUE
    ELSE IF SUB_STR(dstr, 1,3) = 'Too' THEN
      motion_line = takeNextStr(motion_line, ',')
      motiondata.tool_offset = getIntInStr(dstr)
    ELSE IF SUB_STR(dstr, 1,3) = 'Off' THEN
      motion_line = takeNextStr(motion_line, ',')
      motiondata.frame_offset = getIntInStr(dstr)
    ELSE IF (SUB_STR(dstr, 1, 2) = 'TA') OR (SUB_STR(dstr, 1, 2) = 'TB') THEN
      IF SUB_STR(dstr, 1, 2) = 'TB' THEN
        motiondata.callback.timeBefore = TRUE
      ENDIF

      --Move to next part of the TA/TB modifier
      motion_line = takeNextStr(motion_line, ' ')
        --take out extra spaces
      motion_line = lstrip(motion_line)
        --get time
      dstr = takeStr(motion_line, ',')
      motiondata.callback.callTime = s_to_r(SUB_STR(dstr, 1, 4))
        --get program or pin
      motion_line = takeNextStr(motion_line, ',')
      dstr = takeStr(motion_line, ' ')
      IF SUB_STR(dstr, 1, 3) = 'DO[' THEN
          --get DO pin
        dstr = takeStr(motion_line, '=')
        motiondata.callback.pin = getIntInStr(dstr)
        motion_line = takeNextStr(motion_line, '=')
          --determine if pin is ON or OFF
        dstr = takeStr(motion_line, ' ')
        IF STR_LEN(dstr) < 3 THEN -- ON 
          motiondata.callback.pinState = TRUE
        ELSE -- OFF
          motiondata.callback.pinState = FALSE
        ENDIF
      ELSE
        --get time after program
        motion_line = takeNextStr(motion_line, ' ')
        dstr = takeStr(motion_line, ' ')
        motiondata.callback.prog = dstr
      ENDIF
    ENDIF
    ENDIF
    ENDIF
    ENDIF
    ENDIF
    ENDIF

    --..NOTE:: if the modifier is not listed it will be skipped

    --move to next modifier
    motion_line = takeNextStr(motion_line, ' ')
    motion_line = lstrip(motion_line)

  END parse_mod_

ROUTINE parse_pose_(motion_line : STRING; motiondata : t_MOTIONSTAT)
  VAR
    dstr : STRING[32]
    idx : INTEGER
  BEGIN
    dstr = takeStr(motion_line, ' ')
      --remove 'P[]'
    dstr = SUB_STR(dstr,3,STR_LEN(dstr)-1)
      --remove comment
    idx = char_index(dstr, ':') - 1
    IF idx > 0 THEN
      dstr = SUB_STR(dstr,1,idx)
    ENDIF

    motiondata.id = s_to_i(dstr)

    motion_line = takeNextStr(motion_line, ' ')
  END parse_pose_

ROUTINE parse_speed_(motion_line : STRING; motiondata : t_MOTIONSTAT)
  VAR
    dstr : STRING[32]
  BEGIN
    dstr = takeStr(motion_line, ' ')
    motiondata.speed = getIntInStr(dstr)

    motion_line = takeNextStr(motion_line, ' ')
  END parse_speed_

ROUTINE parse_term_(motion_line : STRING; motiondata : t_MOTIONSTAT)
  VAR
    dstr : STRING[32]
  BEGIN
    dstr = takeStr(motion_line, ' ')

    motiondata.fine = FALSE
    IF dstr = 'FINE' THEN
      motiondata.fine = TRUE
      motiondata.term = 0
    ELSE
      motiondata.term = getIntInStr(dstr)
    ENDIF

    motion_line = takeNextStr(motion_line, ' ')
  END parse_term_

--motion string should have the ':' removed already. First character
--should be the motion type
ROUTINE parse_motion
  VAR
    motiondata : t_MOTIONSTAT
  BEGIN
    --initialize motion data
    motiondata = set_motion_default

    --get motion type
    IF SUB_STR(motion_line,1,1) = 'J' THEN
      motiondata.typ = MOVE_JOINT
    ELSE IF SUB_STR(motion_line,1,1) = 'L' THEN
      motiondata.typ = MOVE_LINEAR
    ELSE IF SUB_STR(motion_line,1,1) = 'C' THEN
      motiondata.typ = MOVE_CIRCLE
    ELSE IF SUB_STR(motion_line,1,1) = 'A' THEN
      motiondata.typ = MOVE_ARC
    ENDIF
    ENDIF
    ENDIF
    ENDIF

    motion_line = takeNextStr(motion_line, ' ')

    --get position index
    parse_pose_(motion_line, motiondata)

    --get speed
    parse_speed_(motion_line, motiondata)

    --get termination
    parse_term_(motion_line, motiondata)

    --search for modifiers until string is empty
    WHILE STR_LEN(motion_line) > 0 DO
      parse_mod_(motion_line, motiondata)
    ENDWHILE

    RETURN(motiondata)
  END parse_motion

ROUTINE get_motion_statements
  VAR
    dstr : STRING[4]
    i,status : INTEGER
  BEGIN
    i = PATH_LEN(pth)
    dstr = ''

    WHILE dstr <> '/POS' DO
      --get next line
      files__read_line_ref(curr_prog, tpefile, curr_line)
      tpe__sanitize_line
      dstr = SUB_STR(curr_line,1,4)

      --determine if line is a motion statement
      IF is_line_a_motion(curr_line) THEN
        --parse motion statement
        i = i + 1
        APPEND_NODE(pth,status)
        pth[i] = parse_motion(curr_line)
      ENDIF
    ENDWHILE
  END get_motion_statements

-- ****** setters *****
-- ********************

ROUTINE set_cart_pose
  VAR
    p_stat : TPEPROGRAMS
    status : INTEGER
  BEGIN
    p_stat = tpe__get_open_id(TPE_name)

%ifdef MOTION_TYPE_ATTR1
    SET_POS_TPE(p_stat.open_id, pose_no, pose.MOTION_TYPE_ATTR1, status, RBT_GRP)
%else
    SET_POS_TPE(p_stat.open_id, pose_no, pose, status, RBT_GRP)
%endif

%ifdef ROT_GRP
    SET_JPOS_TPE(p_stat.open_id, pose_no, pose.MOTION_TYPE_ATTR2, status, ROT_GRP)
%endif
    
  END set_cart_pose

ROUTINE set_joint_pose
  VAR
    p_stat : TPEPROGRAMS
    status : INTEGER
  BEGIN
    p_stat = tpe__get_open_id(TPE_name)

%ifdef MOTION_TYPE_ATTR1
    SET_JPOS_TPE(p_stat.open_id, pose_no, pose.MOTION_TYPE_ATTR1, status, RBT_GRP)
%else
    SET_JPOS_TPE(p_stat.open_id, pose_no, pose, status, RBT_GRP)
%endif

%ifdef ROT_GRP
    SET_JPOS_TPE(p_stat.open_id, pose_no, pose.MOTION_TYPE_ATTR2, status, ROT_GRP)
%endif

  END set_joint_pose

ROUTINE set_tpe_poses
  VAR
    i : INTEGER
  BEGIN
    --add joint poses
    FOR i=1 TO PATH_LEN(joint_poses) DO
      set_joint_pose(TPE_name, (joint_poses[i].id), joint_poses[i].pose)
    ENDFOR

    --add cart poses
    FOR i=1 TO PATH_LEN(cart_poses) DO
      set_cart_pose(TPE_name, (cart_poses[i].id), cart_poses[i].pose)
    ENDFOR

  END set_tpe_poses

-- ***** methods ******
-- ********************

ROUTINE copy_cart_poses
  VAR
   i, status : INTEGER
  BEGIN
    FOR i=1 TO PATH_LEN(poses) DO
      APPEND_NODE(out_poses,status)
      out_poses[i].id = poses[i].id
      out_poses[i].tool = poses[i].tool
      out_poses[i].frame = poses[i].frame
      `MOTION_DATA_FILE`__copy(poses[i].pose, out_poses[i].pose)
    ENDFOR
  END copy_cart_poses

ROUTINE copy_joint_poses
  VAR
   i, status : INTEGER
  BEGIN
    FOR i=1 TO PATH_LEN(poses) DO
      APPEND_NODE(out_poses,status)
      out_poses[i].id = poses[i].id
      out_poses[i].tool = poses[i].tool
      out_poses[i].frame = poses[i].frame
      `MOTION_DATA_FILE`__copy_joint(poses[i].pose, out_poses[i].pose)
    ENDFOR

  END copy_joint_poses

ROUTINE multi_cart_poses
  VAR
    i : INTEGER
  BEGIN
    --if lists are different sizes dont multiply them
    IF PATH_LEN(poses) <> PATH_LEN(poses2) THEN
      karelError(ARR_LEN_MISMATCH, 'cartesian paths are a different size. Cant multiply together', ER_ABORT)
    ENDIF

    --multiply poses together
    FOR i=1 TO PATH_LEN(poses) DO
      poses[i].pose = `MOTION_DATA_FILE`__poseMul(poses[i].pose, poses2[i].pose)
    ENDFOR

  END multi_cart_poses


BEGIN
END class_name